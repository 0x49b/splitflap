#!/usr/bin/env python
#   Copyright 2017 Scott Bezek and the splitflap contributors
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

import os

import subprocess

_TEMPLATE = """/*
   Copyright 2017 Scott Bezek and the splitflap contributors

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

// NOTE: THIS FILE IS AUTOGENERATED! DO NOT MODIFY!
// To update, run `{script_path}`

#ifndef ACCELERATION
#define ACCELERATION

namespace Acceleration {{
    const int RAMP_PERIODS[] = {{{periods_array}}};
    const int NUM_RAMP_LEVELS = {num_ramp_levels};
}}
#endif
"""


def run(output_file_path, min_period_micros, max_period_micros, accel_time_micros):
    min_velocity = 1000000 / float(max_period_micros)
    max_velocity = 1000000 / float(min_period_micros)

    t = 0
    ramp_periods = []
    while t < accel_time_micros:
        velocity = min_velocity + (max_velocity - min_velocity) * float(t) / accel_time_micros
        if velocity > max_velocity:
            velocity = max_velocity

        period = int(1000000 / velocity)
        
        ramp_periods.append(period)
        t += period

    git_root = subprocess.check_output(['git', 'rev-parse', '--show-toplevel'], cwd=os.path.dirname(__file__)).strip()
    script_path = os.path.relpath(os.path.abspath(__file__), os.path.abspath(git_root))
    with open(output_file_path, 'wb') as f:
        f.write(_TEMPLATE.format(
            periods_array=', '.join([str(x) for x in ramp_periods]),
            num_ramp_levels=len(ramp_periods),
            script_path=script_path,
        ))


if __name__ == '__main__':
    output_file_path = os.path.join(os.path.dirname(__file__), 'acceleration.h')
    run(
        output_file_path,
        min_period_micros=1200,
        max_period_micros=20000,
        accel_time_micros=200000,
    )
