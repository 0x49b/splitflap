from xml.dom import minidom

"""
Processes SVG files generated by OpenSCAD to prepare for laser cutting
"""

REGISTRATION_MARK = "M -49,49 L -50,49 L -50,50 L -49,50 z"

class SvgProcessor(object):

    def __init__(self, input_file):
        self.dom = minidom.parse(input_file)
        self.svg_node = self.dom.documentElement

    def fix_dimens(self):
        # Add mm units to the document dimensions
        self.svg_node.attributes['width'].value += 'mm'
        self.svg_node.attributes['height'].value += 'mm'

    def apply_laser_cut_style(self):
        # Set fill and stroke for laser cutting
        for path in self.svg_node.getElementsByTagName('path'):
                SvgProcessor._apply_attributes(path, {
                    'fill': 'none',
                    'stroke': '#0000ff',
                    'stroke-width': '0.01',
                })

    def apply_laser_etch_style(self):
        # Set fill and stroke for laser etching
        for path in self.svg_node.getElementsByTagName('path'):
                SvgProcessor._apply_attributes(path, {
                    'fill': '#000000',
                    'stroke': 'none',
                })

    def delete_registration_mark(self):
        for path in self.svg_node.getElementsByTagName('path'):
            data = path.attributes['d']
            if REGISTRATION_MARK not in data.value:
                raise ValueError("Registration mark not found!")
            data.value = data.value.replace(REGISTRATION_MARK, '')


    def import_paths(self, from_svg_processor):
        for path in from_svg_processor.svg_node.getElementsByTagName('path'):
            output_node = self.dom.importNode(path, True)
            self.svg_node.appendChild(output_node)

    def write(self, filename):
        with open(filename, 'wb') as output_file:
            self.svg_node.writexml(output_file)

    @staticmethod
    def _apply_attributes(node, values):
        for (k,v) in values.items():
            node.attributes[k] = v


