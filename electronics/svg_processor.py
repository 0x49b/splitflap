#   Copyright 2015 Scott Bezek
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

import logging
import re
from xml.dom import minidom

"""
Processes SVG files generated by pcbnew to colorize and merge
"""

logger = logging.getLogger(__name__)

class SvgProcessor(object):

    def __init__(self, input_file):
        self.dom = minidom.parse(input_file)
        self.svg_node = self.dom.documentElement

    def apply_color(self, fill, fill_opacity):
        # Set fill and stroke on all groups
        for group in self.svg_node.getElementsByTagName('g'):
            SvgProcessor._apply_style(group, {
                'fill': fill,
                'stroke': fill,
                'opacity': '0.5',
            })
            #SvgProcessor._multiply_style(group, {
            #    'fill-opacity': fill_opacity,
            #    'stroke-opacity': fill_opacity,
            #})

    def import_groups(self, from_svg_processor):
        for group in from_svg_processor.svg_node.getElementsByTagName('g'):
            output_node = self.dom.importNode(group, True)
            self.svg_node.appendChild(output_node)

    def write(self, filename):
        with open(filename, 'wb') as output_file:
            self.svg_node.writexml(output_file)

    @staticmethod
    def _apply_style(node, values):
        original_style = node.attributes['style'].value
        for (k,v) in values.items():
            new_value = v
            escaped_key = re.escape(k)
            m = re.search(r'\b' + escaped_key + r':(?P<value>[^;]*);', original_style)
            if m:
                original_style = re.sub(
                    r'\b' + escaped_key + r':[^;]*;',
                    k + ':' + v + ';',
                    original_style)
            else:
                original_style += k + ':' + v + ';'
            node.attributes['style'] = original_style
        #    original_style = re.sub(
        #        r'\b' + escaped_key + r':[^;]*;',
        #        k + r':' + v + r';',
        #        original_style)
        #node.attributes['style'] = original_style

    @staticmethod
    def _multiply_style(node, values):
        original_style = node.attributes['style'].value
        for (k,v) in values.items():
            new_value = v
            escaped_key = re.escape(k)
            m = re.search(r'\b' + escaped_key + r':(?P<value>[^;]*);', original_style)
            if m:
                original_value = float(m.group('value'))
                new_value = v * original_value
                original_style = re.sub(
                    r'\b' + escaped_key + r':[^;]*;',
                    k + ':' + str(new_value) + ';',
                    original_style)
                node.attributes['style'] = original_style



